//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GlyphScript.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GlyphScriptCompiler.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GlyphScriptLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, WRITE=2, READ=3, STRING=4, ID=5, DECIMAL=6, INT=7, NEWLINE=8, 
		WHITE_SPACE=9, COMMENT=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "WRITE", "READ", "STRING", "ID", "DECIMAL", "INT", "NEWLINE", 
		"WHITE_SPACE", "COMMENT", "STRING_CHAR"
	};


	public GlyphScriptLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GlyphScriptLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "WRITE", "READ", "STRING", "ID", "DECIMAL", "INT", "NEWLINE", 
		"WHITE_SPACE", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GlyphScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GlyphScriptLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,10,112,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,40,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,54,8,2,1,3,1,3,5,3,58,8,3,10,3,12,3,61,9,3,1,3,1,
		3,1,4,1,4,5,4,67,8,4,10,4,12,4,70,9,4,1,5,4,5,73,8,5,11,5,12,5,74,1,5,
		1,5,4,5,79,8,5,11,5,12,5,80,1,6,4,6,84,8,6,11,6,12,6,85,1,7,3,7,89,8,7,
		1,7,1,7,1,8,4,8,94,8,8,11,8,12,8,95,1,8,1,8,1,9,1,9,1,9,1,9,5,9,104,8,
		9,10,9,12,9,107,9,9,1,9,1,9,1,10,1,10,0,0,11,1,1,3,2,5,3,7,4,9,5,11,6,
		13,7,15,8,17,9,19,10,21,0,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
		95,95,97,122,1,0,48,57,2,0,9,9,32,32,2,0,10,10,13,13,5,0,9,10,13,13,36,
		36,39,39,92,92,120,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
		1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
		0,1,23,1,0,0,0,3,39,1,0,0,0,5,53,1,0,0,0,7,55,1,0,0,0,9,64,1,0,0,0,11,
		72,1,0,0,0,13,83,1,0,0,0,15,88,1,0,0,0,17,93,1,0,0,0,19,99,1,0,0,0,21,
		110,1,0,0,0,23,24,5,61,0,0,24,2,1,0,0,0,25,40,5,128226,0,0,26,27,5,58,
		0,0,27,28,5,108,0,0,28,29,5,111,0,0,29,30,5,117,0,0,30,31,5,100,0,0,31,
		32,5,115,0,0,32,33,5,112,0,0,33,34,5,101,0,0,34,35,5,97,0,0,35,36,5,107,
		0,0,36,37,5,101,0,0,37,38,5,114,0,0,38,40,5,58,0,0,39,25,1,0,0,0,39,26,
		1,0,0,0,40,4,1,0,0,0,41,42,5,9000,0,0,42,54,5,65039,0,0,43,44,5,58,0,0,
		44,45,5,107,0,0,45,46,5,101,0,0,46,47,5,121,0,0,47,48,5,98,0,0,48,49,5,
		111,0,0,49,50,5,97,0,0,50,51,5,114,0,0,51,52,5,100,0,0,52,54,5,58,0,0,
		53,41,1,0,0,0,53,43,1,0,0,0,54,6,1,0,0,0,55,59,5,34,0,0,56,58,3,21,10,
		0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,
		0,61,59,1,0,0,0,62,63,5,34,0,0,63,8,1,0,0,0,64,68,7,0,0,0,65,67,7,1,0,
		0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,10,1,0,0,
		0,70,68,1,0,0,0,71,73,7,2,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,
		0,74,75,1,0,0,0,75,76,1,0,0,0,76,78,5,46,0,0,77,79,7,2,0,0,78,77,1,0,0,
		0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,12,1,0,0,0,82,84,7,2,0,
		0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,14,1,0,0,
		0,87,89,5,13,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,5,10,
		0,0,91,16,1,0,0,0,92,94,7,3,0,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,
		0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,98,6,8,0,0,98,18,1,0,0,0,99,100,5,47,
		0,0,100,101,5,47,0,0,101,105,1,0,0,0,102,104,8,4,0,0,103,102,1,0,0,0,104,
		107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,105,1,
		0,0,0,108,109,6,9,0,0,109,20,1,0,0,0,110,111,8,5,0,0,111,22,1,0,0,0,11,
		0,39,53,59,68,74,80,85,88,95,105,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GlyphScriptCompiler.Antlr
