//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GlyphScript.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GlyphScriptCompiler.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GlyphScriptLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, COMMENT=2, MULTILINE_COMMENT=3, LONG=4, INT=5, DOUBLE=6, FLOAT=7, 
		WRITE=8, READ=9, STRING=10, ID=11, LONG_LITERAL=12, INT_LITERAL=13, DOUBLE_LITERAL=14, 
		FLOAT_LITERAL=15, NEWLINE=16, WHITE_SPACE=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "COMMENT", "MULTILINE_COMMENT", "LONG", "INT", "DOUBLE", "FLOAT", 
		"WRITE", "READ", "STRING", "ID", "LONG_LITERAL", "INT_LITERAL", "DOUBLE_LITERAL", 
		"FLOAT_LITERAL", "NEWLINE", "WHITE_SPACE", "STRING_CHAR", "INT_SYMBOL", 
		"FLOAT_SYMBOL"
	};


	public GlyphScriptLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GlyphScriptLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "COMMENT", "MULTILINE_COMMENT", "LONG", "INT", "DOUBLE", "FLOAT", 
		"WRITE", "READ", "STRING", "ID", "LONG_LITERAL", "INT_LITERAL", "DOUBLE_LITERAL", 
		"FLOAT_LITERAL", "NEWLINE", "WHITE_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GlyphScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GlyphScriptLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,17,233,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,1,1,1,
		1,1,1,1,5,1,48,8,1,10,1,12,1,51,9,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,59,8,2,
		10,2,12,2,62,9,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,
		6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,93,8,
		7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,107,8,8,1,9,1,9,
		5,9,111,8,9,10,9,12,9,114,9,9,1,9,1,9,1,10,1,10,5,10,120,8,10,10,10,12,
		10,123,9,10,1,11,4,11,126,8,11,11,11,12,11,127,1,11,1,11,1,12,4,12,133,
		8,12,11,12,12,12,134,1,13,4,13,138,8,13,11,13,12,13,139,1,13,1,13,4,13,
		144,8,13,11,13,12,13,145,3,13,148,8,13,1,13,1,13,1,14,4,14,153,8,14,11,
		14,12,14,154,1,14,1,14,4,14,159,8,14,11,14,12,14,160,3,14,163,8,14,1,14,
		3,14,166,8,14,1,15,3,15,169,8,15,1,15,1,15,1,16,4,16,174,8,16,11,16,12,
		16,175,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,189,
		8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		3,19,232,8,19,1,60,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,0,37,0,39,0,1,0,10,2,0,10,
		10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
		2,0,76,76,108,108,2,0,68,68,100,100,2,0,70,70,102,102,2,0,9,9,32,32,5,
		0,9,10,13,13,36,36,39,39,92,92,2,0,128311,128311,128313,128313,249,0,1,
		1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
		13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
		0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
		1,41,1,0,0,0,3,43,1,0,0,0,5,54,1,0,0,0,7,68,1,0,0,0,9,71,1,0,0,0,11,73,
		1,0,0,0,13,76,1,0,0,0,15,92,1,0,0,0,17,106,1,0,0,0,19,108,1,0,0,0,21,117,
		1,0,0,0,23,125,1,0,0,0,25,132,1,0,0,0,27,137,1,0,0,0,29,152,1,0,0,0,31,
		168,1,0,0,0,33,173,1,0,0,0,35,179,1,0,0,0,37,188,1,0,0,0,39,231,1,0,0,
		0,41,42,5,61,0,0,42,2,1,0,0,0,43,44,5,47,0,0,44,45,5,47,0,0,45,49,1,0,
		0,0,46,48,8,0,0,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,
		0,0,50,52,1,0,0,0,51,49,1,0,0,0,52,53,6,1,0,0,53,4,1,0,0,0,54,55,5,47,
		0,0,55,56,5,42,0,0,56,60,1,0,0,0,57,59,9,0,0,0,58,57,1,0,0,0,59,62,1,0,
		0,0,60,61,1,0,0,0,60,58,1,0,0,0,61,63,1,0,0,0,62,60,1,0,0,0,63,64,5,42,
		0,0,64,65,5,47,0,0,65,66,1,0,0,0,66,67,6,2,0,0,67,6,1,0,0,0,68,69,3,37,
		18,0,69,70,3,37,18,0,70,8,1,0,0,0,71,72,3,37,18,0,72,10,1,0,0,0,73,74,
		3,39,19,0,74,75,3,39,19,0,75,12,1,0,0,0,76,77,3,39,19,0,77,14,1,0,0,0,
		78,93,5,128226,0,0,79,80,5,58,0,0,80,81,5,108,0,0,81,82,5,111,0,0,82,83,
		5,117,0,0,83,84,5,100,0,0,84,85,5,115,0,0,85,86,5,112,0,0,86,87,5,101,
		0,0,87,88,5,97,0,0,88,89,5,107,0,0,89,90,5,101,0,0,90,91,5,114,0,0,91,
		93,5,58,0,0,92,78,1,0,0,0,92,79,1,0,0,0,93,16,1,0,0,0,94,95,5,9000,0,0,
		95,107,5,65039,0,0,96,97,5,58,0,0,97,98,5,107,0,0,98,99,5,101,0,0,99,100,
		5,121,0,0,100,101,5,98,0,0,101,102,5,111,0,0,102,103,5,97,0,0,103,104,
		5,114,0,0,104,105,5,100,0,0,105,107,5,58,0,0,106,94,1,0,0,0,106,96,1,0,
		0,0,107,18,1,0,0,0,108,112,5,34,0,0,109,111,3,35,17,0,110,109,1,0,0,0,
		111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,112,
		1,0,0,0,115,116,5,34,0,0,116,20,1,0,0,0,117,121,7,1,0,0,118,120,7,2,0,
		0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,
		22,1,0,0,0,123,121,1,0,0,0,124,126,7,3,0,0,125,124,1,0,0,0,126,127,1,0,
		0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,130,7,4,0,0,130,
		24,1,0,0,0,131,133,7,3,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,
		0,0,134,135,1,0,0,0,135,26,1,0,0,0,136,138,7,3,0,0,137,136,1,0,0,0,138,
		139,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,147,1,0,0,0,141,143,5,
		46,0,0,142,144,7,3,0,0,143,142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,
		145,146,1,0,0,0,146,148,1,0,0,0,147,141,1,0,0,0,147,148,1,0,0,0,148,149,
		1,0,0,0,149,150,7,5,0,0,150,28,1,0,0,0,151,153,7,3,0,0,152,151,1,0,0,0,
		153,154,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,162,1,0,0,0,156,158,
		5,46,0,0,157,159,7,3,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,
		0,160,161,1,0,0,0,161,163,1,0,0,0,162,156,1,0,0,0,162,163,1,0,0,0,163,
		165,1,0,0,0,164,166,7,6,0,0,165,164,1,0,0,0,165,166,1,0,0,0,166,30,1,0,
		0,0,167,169,5,13,0,0,168,167,1,0,0,0,168,169,1,0,0,0,169,170,1,0,0,0,170,
		171,5,10,0,0,171,32,1,0,0,0,172,174,7,7,0,0,173,172,1,0,0,0,174,175,1,
		0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,178,6,16,0,0,
		178,34,1,0,0,0,179,180,8,8,0,0,180,36,1,0,0,0,181,189,5,128290,0,0,182,
		183,5,58,0,0,183,184,5,49,0,0,184,185,5,50,0,0,185,186,5,51,0,0,186,187,
		5,52,0,0,187,189,5,58,0,0,188,181,1,0,0,0,188,182,1,0,0,0,189,38,1,0,0,
		0,190,232,7,9,0,0,191,192,5,58,0,0,192,193,5,108,0,0,193,194,5,97,0,0,
		194,195,5,114,0,0,195,196,5,103,0,0,196,197,5,101,0,0,197,198,5,95,0,0,
		198,199,5,98,0,0,199,200,5,108,0,0,200,201,5,117,0,0,201,202,5,101,0,0,
		202,203,5,95,0,0,203,204,5,100,0,0,204,205,5,105,0,0,205,206,5,97,0,0,
		206,207,5,109,0,0,207,208,5,111,0,0,208,209,5,110,0,0,209,210,5,100,0,
		0,210,232,5,58,0,0,211,212,5,58,0,0,212,213,5,115,0,0,213,214,5,109,0,
		0,214,215,5,97,0,0,215,216,5,108,0,0,216,217,5,108,0,0,217,218,5,95,0,
		0,218,219,5,98,0,0,219,220,5,108,0,0,220,221,5,117,0,0,221,222,5,101,0,
		0,222,223,5,95,0,0,223,224,5,100,0,0,224,225,5,105,0,0,225,226,5,97,0,
		0,226,227,5,109,0,0,227,228,5,111,0,0,228,229,5,110,0,0,229,230,5,100,
		0,0,230,232,5,58,0,0,231,190,1,0,0,0,231,191,1,0,0,0,231,211,1,0,0,0,232,
		40,1,0,0,0,20,0,49,60,92,106,112,121,127,134,139,145,147,154,160,162,165,
		168,175,188,231,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GlyphScriptCompiler.Antlr
