//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GlyphScript.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GlyphScriptCompiler.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GlyphScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, COMMENT=2, MULTILINE_COMMENT=3, LONG=4, INT=5, DOUBLE=6, FLOAT=7, 
		WRITE=8, READ=9, STRING=10, ID=11, LONG_LITERAL=12, INT_LITERAL=13, DOUBLE_LITERAL=14, 
		FLOAT_LITERAL=15, NEWLINE=16, WHITE_SPACE=17;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_print = 2, RULE_read = 3, RULE_assignment = 4, 
		RULE_declaration = 5, RULE_defaultDeclaration = 6, RULE_initializingDeclaration = 7, 
		RULE_immediateValue = 8, RULE_type = 9;
	public static readonly string[] ruleNames = {
		"program", "statement", "print", "read", "assignment", "declaration", 
		"defaultDeclaration", "initializingDeclaration", "immediateValue", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "COMMENT", "MULTILINE_COMMENT", "LONG", "INT", "DOUBLE", "FLOAT", 
		"WRITE", "READ", "STRING", "ID", "LONG_LITERAL", "INT_LITERAL", "DOUBLE_LITERAL", 
		"FLOAT_LITERAL", "NEWLINE", "WHITE_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GlyphScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GlyphScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GlyphScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GlyphScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GlyphScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(GlyphScriptParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(GlyphScriptParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGlyphScriptVisitor<TResult> typedVisitor = visitor as IGlyphScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 68592L) != 0)) {
				{
				{
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3056L) != 0)) {
					{
					State = 20;
					statement();
					}
				}

				State = 23;
				Match(NEWLINE);
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGlyphScriptVisitor<TResult> typedVisitor = visitor as IGlyphScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LONG:
			case INT:
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 31;
				declaration();
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32;
				print();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 33;
				assignment();
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 4);
				{
				State = 34;
				read();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(GlyphScriptParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GlyphScriptParser.ID, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGlyphScriptVisitor<TResult> typedVisitor = visitor as IGlyphScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 4, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(WRITE);
			State = 38;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(GlyphScriptParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GlyphScriptParser.ID, 0); }
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGlyphScriptVisitor<TResult> typedVisitor = visitor as IGlyphScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(Context, State);
		EnterRule(_localctx, 6, RULE_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(READ);
			State = 41;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GlyphScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImmediateValueContext immediateValue() {
			return GetRuleContext<ImmediateValueContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGlyphScriptVisitor<TResult> typedVisitor = visitor as IGlyphScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(ID);
			State = 44;
			Match(T__0);
			State = 45;
			immediateValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefaultDeclarationContext defaultDeclaration() {
			return GetRuleContext<DefaultDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializingDeclarationContext initializingDeclaration() {
			return GetRuleContext<InitializingDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGlyphScriptVisitor<TResult> typedVisitor = visitor as IGlyphScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				defaultDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				initializingDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GlyphScriptParser.ID, 0); }
		public DefaultDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGlyphScriptVisitor<TResult> typedVisitor = visitor as IGlyphScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultDeclarationContext defaultDeclaration() {
		DefaultDeclarationContext _localctx = new DefaultDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_defaultDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			type();
			State = 52;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializingDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GlyphScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImmediateValueContext immediateValue() {
			return GetRuleContext<ImmediateValueContext>(0);
		}
		public InitializingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializingDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGlyphScriptVisitor<TResult> typedVisitor = visitor as IGlyphScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializingDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializingDeclarationContext initializingDeclaration() {
		InitializingDeclarationContext _localctx = new InitializingDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_initializingDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			type();
			State = 55;
			Match(ID);
			State = 56;
			Match(T__0);
			State = 57;
			immediateValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmediateValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LITERAL() { return GetToken(GlyphScriptParser.INT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_LITERAL() { return GetToken(GlyphScriptParser.LONG_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(GlyphScriptParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_LITERAL() { return GetToken(GlyphScriptParser.DOUBLE_LITERAL, 0); }
		public ImmediateValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immediateValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGlyphScriptVisitor<TResult> typedVisitor = visitor as IGlyphScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmediateValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmediateValueContext immediateValue() {
		ImmediateValueContext _localctx = new ImmediateValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_immediateValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 61440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GlyphScriptParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(GlyphScriptParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GlyphScriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(GlyphScriptParser.DOUBLE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGlyphScriptVisitor<TResult> typedVisitor = visitor as IGlyphScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,17,64,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,3,0,22,8,0,1,0,5,0,25,8,0,10,0,12,0,28,9,0,1,0,
		1,0,1,1,1,1,1,1,1,1,3,1,36,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
		1,5,1,5,3,5,50,8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,
		0,0,10,0,2,4,6,8,10,12,14,16,18,0,2,1,0,12,15,1,0,4,7,59,0,26,1,0,0,0,
		2,35,1,0,0,0,4,37,1,0,0,0,6,40,1,0,0,0,8,43,1,0,0,0,10,49,1,0,0,0,12,51,
		1,0,0,0,14,54,1,0,0,0,16,59,1,0,0,0,18,61,1,0,0,0,20,22,3,2,1,0,21,20,
		1,0,0,0,21,22,1,0,0,0,22,23,1,0,0,0,23,25,5,16,0,0,24,21,1,0,0,0,25,28,
		1,0,0,0,26,24,1,0,0,0,26,27,1,0,0,0,27,29,1,0,0,0,28,26,1,0,0,0,29,30,
		5,0,0,1,30,1,1,0,0,0,31,36,3,10,5,0,32,36,3,4,2,0,33,36,3,8,4,0,34,36,
		3,6,3,0,35,31,1,0,0,0,35,32,1,0,0,0,35,33,1,0,0,0,35,34,1,0,0,0,36,3,1,
		0,0,0,37,38,5,8,0,0,38,39,5,11,0,0,39,5,1,0,0,0,40,41,5,9,0,0,41,42,5,
		11,0,0,42,7,1,0,0,0,43,44,5,11,0,0,44,45,5,1,0,0,45,46,3,16,8,0,46,9,1,
		0,0,0,47,50,3,12,6,0,48,50,3,14,7,0,49,47,1,0,0,0,49,48,1,0,0,0,50,11,
		1,0,0,0,51,52,3,18,9,0,52,53,5,11,0,0,53,13,1,0,0,0,54,55,3,18,9,0,55,
		56,5,11,0,0,56,57,5,1,0,0,57,58,3,16,8,0,58,15,1,0,0,0,59,60,7,0,0,0,60,
		17,1,0,0,0,61,62,7,1,0,0,62,19,1,0,0,0,4,21,26,35,49
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GlyphScriptCompiler.Antlr
