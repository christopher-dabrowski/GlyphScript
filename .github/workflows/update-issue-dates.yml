name: Update Issue Dates Based on Status

on:
  project_card:
    types: [moved]

jobs:
  update-project-dates:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      project: write

    steps:
      - name: Update Project Fields Based on Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const now = new Date().toISOString();

            // Project configuration
            const projectNumber = 4;
            const startDateFieldName = 'Start date';
            const endDateFieldName = 'End date';
            const statusFieldName = 'Status';

            // Status values that trigger date updates
            const inProgressStatus = 'In Progress';
            const doneStatus = 'Done';

            async function getProjectData() {
              try {
                // Get project details and field IDs
                const projectQuery = `
                  query($username: String!, $projectNumber: Int!) {
                    user(login: $username) {
                      projectV2(number: $projectNumber) {
                        id
                        fields(first: 20) {
                          nodes {
                            ... on ProjectV2Field {
                              id
                              name
                            }
                            ... on ProjectV2IterationField {
                              id
                              name
                            }
                            ... on ProjectV2SingleSelectField {
                              id
                              name
                              options {
                                id
                                name
                              }
                            }
                            ... on ProjectV2DateField {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }`;

                const username = context.repo.owner;
                const projectResponse = await github.graphql(projectQuery, {
                  username: username,
                  projectNumber: projectNumber
                });

                // Get project ID and field IDs
                const projectId = projectResponse.user.projectV2.id;
                const fields = projectResponse.user.projectV2.fields.nodes;

                const startDateFieldId = fields.find(field => field.name === startDateFieldName)?.id;
                const endDateFieldId = fields.find(field => field.name === endDateFieldName)?.id;
                const statusField = fields.find(field => field.name === statusFieldName);

                if (!statusField) {
                  console.log(`Status field "${statusFieldName}" not found in project`);
                  return null;
                }

                // Get recently updated items in the project
                const recentItemsQuery = `
                  query($projectId: ID!) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 10, orderBy: {field: UPDATED_AT, direction: DESC}) {
                          nodes {
                            id
                            fieldValues(first: 8) {
                              nodes {
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  name
                                  field {
                                    ... on ProjectV2SingleSelectField {
                                      name
                                    }
                                  }
                                }
                                ... on ProjectV2ItemFieldDateValue {
                                  date
                                  field {
                                    ... on ProjectV2DateField {
                                      name
                                    }
                                  }
                                }
                              }
                            }
                            content {
                              ... on Issue {
                                title
                                number
                              }
                            }
                          }
                        }
                      }
                    }
                  }`;

                const itemsResponse = await github.graphql(recentItemsQuery, {
                  projectId: projectId
                });

                const items = itemsResponse.node.items.nodes;

                return {
                  projectId,
                  items,
                  startDateFieldId,
                  endDateFieldId,
                  statusFieldId: statusField.id
                };
              } catch (error) {
                console.error(`Error fetching project data: ${error}`);
                return null;
              }
            }

            async function updateProjectField(projectId, itemId, fieldId, value) {
              if (!fieldId) {
                console.log(`Field not found in project`);
                return;
              }

              // Update field value
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { date: $value }
                  }) {
                    clientMutationId
                  }
                }`;

              await github.graphql(mutation, {
                projectId: projectId,
                itemId: itemId,
                fieldId: fieldId,
                value: value
              });

              console.log(`Updated field successfully`);
            }

            // Main execution
            try {
              const projectData = await getProjectData();
              if (!projectData) return;

              // Process each recently updated item
              for (const item of projectData.items) {
                const fieldValues = item.fieldValues.nodes;

                // Find current status
                const statusValue = fieldValues.find(
                  fv => fv.field && fv.field.name === statusFieldName
                );

                if (!statusValue) continue;

                // Find existing date values
                const startDateValue = fieldValues.find(
                  fv => fv.field && fv.field.name === startDateFieldName
                );

                const endDateValue = fieldValues.find(
                  fv => fv.field && fv.field.name === endDateFieldName
                );

                // Update dates based on status
                if (statusValue.name === inProgressStatus && !startDateValue?.date) {
                  // Set start date when item moves to In Progress and doesn't have a start date
                  await updateProjectField(
                    projectData.projectId,
                    item.id,
                    projectData.startDateFieldId,
                    now
                  );
                  console.log(`Set start date for item ${item.content?.number || 'unknown'}`);
                }
                else if (statusValue.name === doneStatus && !endDateValue?.date) {
                  // Set completion date when item moves to Done and doesn't have an end date
                  await updateProjectField(
                    projectData.projectId,
                    item.id,
                    projectData.endDateFieldId,
                    now
                  );
                  console.log(`Set completion date for item ${item.content?.number || 'unknown'}`);
                }
              }
            } catch (error) {
              console.error(`Error processing project items: ${error}`);
            }
